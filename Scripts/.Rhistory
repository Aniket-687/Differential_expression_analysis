library(readxl)
data <- read_xlsx(DATA.xlsx)
data <- read_xlsx("C:\Users\dasan\Downloads\DATA.xlsx")
data <- read_xlsx("C:/Users/dasan/Downloads/DATA.xlsx")
# Assuming 'df' is your data frame with columns 'BMI' and 'Age'
# Calculate mean BMI for each age range
library(dplyr)
# Define age ranges (adjust ranges according to your data)
age_ranges <- seq(0, 100, by = 10)  # Define age ranges in increments of 10
# Group data by age ranges and calculate mean BMI
mean_bmi_by_age <- df %>%
mutate(Age_Range = cut(Age, breaks = age_ranges)) %>%
group_by(Age_Range) %>%
summarise(mean_BMI = mean(BMI, na.rm = TRUE))
# Assuming you've read the data from an Excel file using readxl package
library(readxl)
# Replace "file_path.xlsx" with your file path and adjust sheet name if needed
df <- read_excel("file_path.xlsx", sheet = "Sheet1")
# Load necessary libraries
library(readxl)
library(dplyr)
# Define the file path to your Excel file
file_path <- "C:/Users/dasan/Downloads/DATA.xlsx"
# Read the Excel file into a data frame
data <- read_excel(file_path)
# Define age ranges (adjust according to your data)
age_ranges <- seq(0, 100, by = 10)  # Define age ranges in increments of 10
# Calculate mean BMI for each age range
mean_bmi_by_age <- data %>%
mutate(Age_Range = cut(Age, breaks = age_ranges)) %>%
group_by(Age_Range) %>%
summarise(mean_BMI = mean(BMI, na.rm = TRUE))
# Plotting the histogram
barplot(height = mean_bmi_by_age$mean_BMI, names.arg = mean_bmi_by_age$Age_Range,
main = "Mean BMI by Age Range", xlab = "Age Range", ylab = "Mean BMI",
col = "skyblue", ylim = c(0, max(mean_bmi_by_age$mean_BMI) * 1.1))
plot(cars)
clear()
clear()
library(ggplot2)
getwd()
getwd()
setwd("C:/Users/dasan/Downloads/Bioinformatics_Project/Differencial_expression_analysis/Scripts")
rm(list = ls())
install.packages("BiocManager")
BiocManager::install("DESeq2")
# load libraries
library(DESeq2)
library(tidyverse)
library(airway)
# read in counts data
counts_data <- read.csv("C:/Users/dasan/Downloads/Bioinformatics_Project/Differencial_expression_analysis/Data/counts_data.csv")
head(counts_data)
# read in sample info
colData <- read.csv("C:/Users/dasan/Downloads/Bioinformatics_Project/Differencial_expression_analysis/Data/sample_info.csv")
View(counts_data)
View(colData)
# making sure the row names in colData matches to column names in counts_data
all(colnames(counts_data) %in% rownames(colData))
# are they in the same order?
all(colnames(counts_data) == rownames(colData))
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = colData,
design = ~ dexamethasone)
View(dds)
dds
# pre-filtering: removing rows with low gene counts
# keeping rows that have at least 10 reads total
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds
# set the factor level
dds$dexamethasone <- relevel(dds$dexamethasone, ref = "untreated")
# Step 3: Run DESeq ----------------------
dds <- DESeq(dds)
res <- results(dds)
res
summary(res)
res0.01 <- results(dds, alpha = 0.01)
summary(res0.01)
# contrasts
resultsNames(dds)
# MA plot
plotMA(res)
rm(list = ls())
library(Seurat)
library(tidyverse)
library(complexheatmap)
library(ComplexHeatmap)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
y
library(ComplexHeatmap)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
library(ComplexHeatmap)
library(Seurat)
library(tidyverse)
library(ComplexHeatmap)
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
library(presto)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "~/Downloads/pbmc3k_bc_matrices/hg19/")
library(Seurat)
library(tidyverse)
library(ComplexHeatmap)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "~/Downloads/pbmc3k_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/dasan/Downloads/pbmc3k_filtered_gene_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/dasan/Downloads/pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
## ScaleData uses top variable genes only
pbmc<- pbmc %>%
NormalizeData(normalization.method = "LogNormalize", scale.factor = 10000) %>%
FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
ScaleData() %>%
RunPCA() %>%
FindNeighbors(dims = 1:10) %>%
FindClusters(resolution = 0.5) %>%
RunUMAP(dims = 1:10)
DimPlot(pbmc, reduction = "umap")
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono",
"NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
#find marker genes
markers<- presto::wilcoxauc(pbmc, 'seurat_clusters', assay = 'data')
install.packages("Presto")
install.packages("devtools")
devtools::install_github("immunogenomics/presto")
library(Seurat)
rm(list = ls())
library(Seurat)
library(tidyverse)
library(ComplexHeatmap)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/dasan/Downloads/pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
## ScaleData uses top variable genes only
pbmc<- pbmc %>%
NormalizeData(normalization.method = "LogNormalize", scale.factor = 10000) %>%
FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
ScaleData() %>%
RunPCA() %>%
FindNeighbors(dims = 1:10) %>%
FindClusters(resolution = 0.5) %>%
RunUMAP(dims = 1:10)
DimPlot(pbmc, reduction = "umap")
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono",
"NK", "DC", "Platelet")
View(pbmc)
View(pbmc.data)
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono",
"NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
#find marker genes
markers<- presto::wilcoxauc(pbmc, 'seurat_clusters', assay = 'data')
install.packages("devtools")
devtools::install_github("immunogenomics/presto")
library(Presto)
library(pkgbuild)
has_rtools()
library(pkgbuild)
has_rtools()
install.packages("devtools")
devtools::install_github("immunogenomics/presto")
library(presto)
library(Seurat)
library(tidyverse)
library(ComplexHeatmap)
library(presto)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/dasan/Downloads/pbmc3k_filtered_gene_bc_matrices/filtered_gene_bc_matrices/hg19")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
## ScaleData uses top variable genes only
pbmc<- pbmc %>%
NormalizeData(normalization.method = "LogNormalize", scale.factor = 10000) %>%
FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
ScaleData() %>%
RunPCA() %>%
FindNeighbors(dims = 1:10) %>%
FindClusters(resolution = 0.5) %>%
RunUMAP(dims = 1:10)
DimPlot(pbmc, reduction = "umap")
new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono",
"NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
#find marker genes
markers<- presto::wilcoxauc(pbmc, 'seurat_clusters', assay = 'data')
markers<- top_markers(markers, n = 10, auc_min = 0.5, pct_in_min = 20, pct_out_max = 20)
markers
all_markers<- markers %>%
select(-rank) %>%
unclass() %>%
stack() %>%
pull(values) %>%
unique() %>%
.[!is.na(.)]
#Seuratâ€™s dot plot
p<- DotPlot(object = pbmc, features = all_markers)
p
# Reproducing the plot in ComplexHeatmap
df <- p$data
head(df)
### the matrix for the scaled expression
exp_mat<-df %>%
select(-pct.exp, -avg.exp) %>%
pivot_wider(names_from = id, values_from = avg.exp.scaled) %>%
as.data.frame()
row.names(exp_mat) <- exp_mat$features.plot
exp_mat <- exp_mat[,-1] %>% as.matrix()
head(exp_mat)
percent_mat<-df %>%
select(-avg.exp, -avg.exp.scaled) %>%
pivot_wider(names_from = id, values_from = pct.exp) %>%
as.data.frame()
row.names(percent_mat) <- percent_mat$features.plot
percent_mat <- percent_mat[,-1] %>% as.matrix()
head(percent_mat)
## the range is from 0 - 100
range(percent_mat)
library(viridis)
install.packages("viridis")
library(Polychrome)
install.packages("Polychrome")
library(viridis)
library(Polychrome)
Polychrome::swatch(viridis(20))
install.packages("viridisLite")
install.packages("viridisLite")
Polychrome::swatch(viridis(20))
## get an idea of the ranges of the matrix
quantile(exp_mat, c(0.1, 0.5, 0.9, 0.99))
grid.rect(x = x, y = y, width = w, height = h,
gp = gpar(col = NA, fill = NA))
grid.circle(x=x,y=y,r= percent_mat[i, j]/100 * min(unit.c(w, h)),
gp = gpar(fill = col_fun(exp_mat[i, j]), col = NA))}
grid.rect(x = x, y = y, width = w, height = h,
gp = gpar(col = NA, fill = NA)),
cell_fun = function(j, i, x, y, w, h, fill){
grid.rect(x = x, y = y, width = w, height = h,
gp = gpar(col = NA, fill = NA))
grid.circle(x=x,y=y,r= percent_mat[i, j]/100 * min(unit.c(w, h)),
gp = gpar(fill = col_fun(exp_mat[i, j]), col = NA))}
cell_fun = function(j, i, x, y, w, h, fill){
grid.rect(x = x, y = y, width = w, height = h,
gp = gpar(col = NA, fill = NA))
grid.circle(x=x,y=y,r= percent_mat[i, j]/100 * min(unit.c(w, h)),
gp = gpar(fill = col_fun(exp_mat[i, j]), col = NA))}
