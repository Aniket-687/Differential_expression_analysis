library(readxl)
data <- read_xlsx(DATA.xlsx)
data <- read_xlsx("C:\Users\dasan\Downloads\DATA.xlsx")
data <- read_xlsx("C:/Users/dasan/Downloads/DATA.xlsx")
# Assuming 'df' is your data frame with columns 'BMI' and 'Age'
# Calculate mean BMI for each age range
library(dplyr)
# Define age ranges (adjust ranges according to your data)
age_ranges <- seq(0, 100, by = 10)  # Define age ranges in increments of 10
# Group data by age ranges and calculate mean BMI
mean_bmi_by_age <- df %>%
mutate(Age_Range = cut(Age, breaks = age_ranges)) %>%
group_by(Age_Range) %>%
summarise(mean_BMI = mean(BMI, na.rm = TRUE))
# Assuming you've read the data from an Excel file using readxl package
library(readxl)
# Replace "file_path.xlsx" with your file path and adjust sheet name if needed
df <- read_excel("file_path.xlsx", sheet = "Sheet1")
# Load necessary libraries
library(readxl)
library(dplyr)
# Define the file path to your Excel file
file_path <- "C:/Users/dasan/Downloads/DATA.xlsx"
# Read the Excel file into a data frame
data <- read_excel(file_path)
# Define age ranges (adjust according to your data)
age_ranges <- seq(0, 100, by = 10)  # Define age ranges in increments of 10
# Calculate mean BMI for each age range
mean_bmi_by_age <- data %>%
mutate(Age_Range = cut(Age, breaks = age_ranges)) %>%
group_by(Age_Range) %>%
summarise(mean_BMI = mean(BMI, na.rm = TRUE))
# Plotting the histogram
barplot(height = mean_bmi_by_age$mean_BMI, names.arg = mean_bmi_by_age$Age_Range,
main = "Mean BMI by Age Range", xlab = "Age Range", ylab = "Mean BMI",
col = "skyblue", ylim = c(0, max(mean_bmi_by_age$mean_BMI) * 1.1))
plot(cars)
clear()
clear()
library(ggplot2)
getwd()
getwd()
rm(list = ls())
setwd("C:/Users/dasan/Downloads/Bioinformatics_Project/Differencial_expression_analysis/Scripts")
# load libraries
library(DESeq2)
library(tidyverse)
library(airway)
# read in counts data
counts_data <- read.csv("C:/Users/dasan/Downloads/Bioinformatics_Project/Differencial_expression_analysis/Data/counts_data.csv")
head(counts_data)
# read in sample info
colData <- read.csv("C:/Users/dasan/Downloads/Bioinformatics_Project/Differencial_expression_analysis/Data/sample_info.csv")
# making sure the row names in colData matches to column names in counts_data
all(colnames(counts_data) %in% rownames(colData))
# checking if the columns are in the same order
all(colnames(counts_data) == rownames(colData))
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = colData,
design = ~ dexamethasone)
dds
# pre-filtering: removing rows with low gene counts
# keeping rows that have at least 10 reads total
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds
# set the factor level
dds$dexamethasone <- relevel(dds$dexamethasone, ref = "untreated")
# Step 3: Run DESeq ----------------------
dds <- DESeq(dds)
res <- results(dds)
res
summary(res)
res0.01 <- results(dds, alpha = 0.01)
summary(res0.01)
# contrasts
resultsNames(dds)
results(dds, contrast = c("dexamethasone", "treated_4hrs", "untreated"))
# MA plot
plotMA(res)
# output directory for plots
out_dir <- "C:/Users/dasan/Downloads/Bioinformatics_Project/Differencial_expression_analysis/Plots"
dir.create(out_dir, showWarnings = FALSE)  # create folder if not exists
# MA plot
MA <- plotMA(res)
# saving the plot
ggsave(filename = "MA_Plot.png", plot = p1, path = out_dir, width = 6, height = 5, dpi = 300)
# saving the plot
ggsave(filename = "MA_Plot.png", plot = MA, path = out_dir, width = 6, height = 5, dpi = 300)
library(ggplot2)
# saving the plot
ggsave(filename = "MA_Plot.png", plot = MA, path = out_dir, width = 6, height = 5, dpi = 300)
# MA plot
png(filename = paste0(out_dir, "MA_plot.png"), width = 2000, height = 1600, res = 300)
plotMA(res)
dev.off()
png(filename = paste0(out_dir, "MA_plot.png"), width = 2000, height = 1600, res = 300)
plotMA(res)
dev.off()
# output directory for plots
out_dir <- "C:/Users/dasan/Downloads/Bioinformatics_Project/Differencial_expression_analysis/Plots/"
dir.create(out_dir, showWarnings = FALSE)  # create folder if not exists
# MA plot
png(filename = paste0(out_dir, "MA_plot.png"), width = 2000, height = 1600, res = 300)
plotMA(res)
dev.off()
plotMA(res)
View(colData)
View(colData)
View(counts_data)
View(counts_data)
View(dds)
View(dds)
View(res)
View(res)
View(res0.01)
View(res0.01)
rm(list = ls())
